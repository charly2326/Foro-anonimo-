
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perfil de Usuario</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>

/* Estilos del contenedor de perfil */
#profileContainer {
document.getElementById("openEditProfileFromModal").addEventListener("click", function () {
    // Cerrar el modal del perfil
    closeModal();

    // Abrir el modal de edición de perfil
    openEditProfileModal();
});
    position: fixed;
    top: 10px;
    right: 10px;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #ddd; /* Color para visualizar */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

#profileContainer img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
}



.modal {
    display: none;
    position: fixed;
    inset: 0;
    align-items: center;
    justify-content: center;
    z-index: 50;
}

.modal-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
}

.modal-content {
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
}

.hidden {
    display: none !important;
}

.scale-100 {
    transform: scale(1);
    opacity: 1;
}

.scale-95 {
    transform: scale(0.95);
    opacity: 0;
}

#profileContainer {
    display: none;
}

</style>
</head>
<body class="bg-gray-100">
    <div class="flex min-h-screen">
        <!-- Sidebar -->
        <aside class="w-1/4 bg-white p-5 shadow-md">
            <!-- Contenedor de Login / Perfil -->
            <div id="authContainer">
                <button id="loginBtn" class="w-full bg-blue-500 text-white p-2 rounded mb-4">Login</button>

                <!-- Contenedor del perfil (oculto por defecto) -->
                <div id="profileContainerSidebar" class="hidden flex items-center justify-center">
                    <img id="profilePicSidebar" src="https://via.placeholder.com/50" alt="Perfil" class="w-10 h-10 rounded-full">
                </div>
            </div>

            <nav>
                <ul>
                    <li class="mb-2"><a href="#" class="block p-2 hover:bg-gray-200 rounded">Pedidos disponibles</a></li>
                    <li class="mb-2"><a href="#" class="block p-2 hover:bg-gray-200 rounded">Notificaciones</a></li>
                    <li class="mb-2"><a href="#" class="block p-2 hover:bg-gray-200 rounded">Mensajes</a></li>
                    <button id="editProfileBtn" class="bg-blue-500 text-white px-4 py-2 rounded mb-2">Editar perfil</button>
                </ul>
            </nav>
            <button class="w-full bg-blue-500 text-white p-2 rounded mt-4">Publicar</button>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 p-6">
            <div class="bg-white p-5 rounded shadow-md mb-4">
                <input type="text" placeholder="¿Qué necesitas?" class="w-full p-2 border rounded mb-2">
                <button class="bg-blue-500 text-white p-2 rounded w-full">Subir archivo</button>
                <button class="bg-blue-500 text-white p-2 rounded w-full mt-2">Solicitar</button>
            </div>
            <div class="bg-white p-5 rounded shadow-md">
                <div class="flex items-center mb-2">
                    <div class="w-10 h-10 bg-gray-300 rounded-full"></div>
                    <span class="ml-2 text-blue-600">@usuario</span>
                </div>
                <p class="text-gray-700">Este es un ejemplo de publicación.</p>
                <div class="bg-gray-200 w-full h-40 mt-2 flex items-center justify-center">Imagen de publicación</div>
                <div class="flex mt-3 space-x-4">
                    <button class="text-gray-600">💬 Comentar</button>
                    <button class="text-red-500">❤️</button>
                    <button class="text-gray-600">🔗</button>
                </div>
            </div>
        </main>

        <!-- Trends Section -->
        <aside class="w-1/4 p-5 bg-white shadow-md">
            <h2 class="font-bold text-lg mb-3">Pedidos recientes</h2>
            <ul>
                <li class="text-blue-600">#Tendencia1</li>
                <li class="text-blue-600">#Tendencia2</li>
                <li class="text-blue-600">#Tendencia3</li>
            </ul>
        </aside>
    </div>

    <!-- Modal de Login -->
    <div id="loginModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg text-center w-96 relative">
            <h2 class="text-xl font-bold mb-4">Bienvenido</h2>
            <p class="text-gray-600 mb-4">Elige una opción para continuar</p>

            <!-- Botón para iniciar sesión como vendedor -->
            <button id="sellerLoginBtn" class="w-full flex items-center justify-center bg-blue-600 text-white p-2 rounded mb-2">
                <img src="https://cdn-icons-png.flaticon.com/512/3081/3081559.png" class="w-6 h-6 mr-2">
                Continuar para vendedores
            </button>

            <!-- Botón para iniciar sesión con Google -->
            <button id="googleLoginBtn" class="w-full flex items-center justify-center bg-red-600 text-white p-2 rounded">
                <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" class="w-6 h-6 mr-2">
                Continuar con Google
            </button>

            <!-- Botón para cerrar el modal -->
            <button id="closeModal" class="absolute top-2 right-2 text-gray-600 text-xl">&times;</button>
        </div>
    </div>

    <!-- Contenedor del perfil -->
    <div id="profileContainer" class="hidden flex items-center space-x-2 cursor-pointer">
        <img id="profilePic" src="https://via.placeholder.com/40" alt="Perfil" class="w-10 h-10 rounded-full">
        <span id="profileName" class="font-semibold"></span>
    </div>


    <!-- MODAL PARA EDITAR PERFIL -->
<div id="editProfileModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white p-6 rounded-lg shadow-lg text-center w-96 relative">
    <button id="closeEditProfileModal" class="absolute top-2 right-2 text-gray-600 text-xl hover:text-gray-800">&times;</button>
    <h2 class="text-xl font-bold mb-4">Editar Perfil</h2>

    <!-- Imagen de Perfil -->
    <img id="editProfilePic" src="https://via.placeholder.com/80" class="w-20 h-20 rounded-full mx-auto mb-3">

    <!-- Input para cambiar nombre -->
    <input id="editProfileName" type="text" class="border p-2 w-full rounded mb-4" placeholder="Nuevo nombre">

    <!-- NUEVOS CAMPOS: Nombre de usuario y biografía -->
    <input id="editProfileUsername" type="text" class="border p-2 w-full rounded mb-4" placeholder="Nombre de usuario (ej. @charly)">
    <textarea id="editProfileBio" class="border p-2 w-full rounded mb-4" rows="3" placeholder="Biografía del usuario..."></textarea>

    <!-- Botón para guardar cambios -->
    <button id="saveProfileBtn" class="bg-blue-500 text-white px-4 py-2 rounded mb-2 w-full">Guardar cambios</button>

    <!-- 🔄 Botón para cambiar a cuenta de vendedor -->
    <button id="switchToSellerBtn" class="bg-yellow-500 text-white px-4 py-2 rounded mb-2 w-full">Cambiar a cuenta de vendedor</button>

    <!-- Botón para cerrar sesión -->
    <button id="logoutBtn" class="bg-red-500 text-white px-4 py-2 rounded w-full">Cerrar sesión</button>
  </div>
</div>


   <!-- MODAL DEL PERFIL -->
<div id="profileModal" class="modal hidden fixed inset-0 flex items-center justify-center z-50">
    <!-- Fondo oscuro difuminado -->
    <div id="modalOverlay" class="modal-overlay fixed inset-0 bg-black bg-opacity-50 backdrop-blur-md"></div>

    <!-- Contenido del modal -->
    <div id="modalContent" class="bg-white p-6 rounded-lg shadow-lg text-center w-96 relative transform scale-95 opacity-0 transition-transform transition-opacity duration-300">

        <!-- Botón de cerrar -->
        <button id="closeProfileModal" class="absolute top-2 right-2 text-gray-600 text-2xl hover:text-gray-800">
            &times;
        </button>

        <!-- Foto de perfil con opción de cambio -->
        <label for="profilePicInput" class="cursor-pointer block">
            <img id="profilePicModal" src="https://via.placeholder.com/80" class="w-24 h-24 rounded-full mx-auto mb-3 border-2 border-gray-300">
        </label>
        <input type="file" id="profilePicInput" accept="image/*" class="hidden">
        <button id="saveProfilePicBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-600 transition mt-2 hidden">
            Guardar Foto
        </button>

        <!-- Nombre y biografía -->
        <h2 class="text-xl font-bold text-gray-900" id="modalProfileName">Owen</h2>
        <p id="modalProfileUsername" class="text-gray-600">@charly</p>
        <p id="modalProfileBio" class="text-gray-500 text-sm mb-4">Esta es la biografía del usuario.</p>

        <!-- Botón de editar perfil (ahora con ID para detectarlo en JS) -->
        <button id="openEditProfileFromModal" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-600 transition">
            Editar perfil
        </button>

        <!-- Información del usuario -->
        <div class="flex justify-around text-gray-700 text-sm mt-3">
            <span><b>1</b> Publicaciones</span>
            <span><b>1</b> Siguiendo</span>
            <span><b>100</b> Seguidores</span>
        </div>

        <!-- Timeline -->
        <h3 class="mt-4 font-bold text-gray-800">Timeline</h3>
        <div class="bg-gray-100 p-2 rounded mt-2 shadow-sm">Primer Publicación</div>
        <div class="bg-gray-100 p-2 rounded mt-2 shadow-sm">Segunda Publicación</div>
    </div>
</div>

    <!-- MODAL PARA VENDEDORES -->
<div id="sellerProfileModal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg text-center w-[500px] relative">
        <!-- Botón de cerrar -->
        <button id="closeSellerModal" class="absolute top-2 right-2 text-gray-600 text-xl hover:text-gray-800">
            &times;
        </button>

        <!-- Imagen de perfil -->
        <img id="sellerProfilePic" src="https://via.placeholder.com/100" class="w-24 h-24 rounded-full mx-auto mb-2">

        <h2 id="sellerName" class="text-xl font-bold">Nombre del Vendedor</h2>
        <p id="sellerUsername" class="text-gray-600">@usuario</p>
        <p id="sellerBio" class="text-gray-500 text-sm mb-4">Biografía del vendedor.</p>

        <!-- Botones y opciones -->
        <button class="bg-green-500 text-white px-4 py-2 rounded mb-2 w-full">📦 Ver pedidos</button>
        <button class="bg-yellow-500 text-white px-4 py-2 rounded mb-2 w-full">💰 Gestionar ingresos</button>
        <button id="editSellerProfileBtn" class="bg-blue-500 text-white px-4 py-2 rounded mb-2 w-full">✏ Editar perfil</button>

        <!-- Estadísticas -->
        <div class="flex justify-around text-gray-700 text-sm mt-3">
            <span><b id="sellerTweets">0</b> Publicaciones</span>
            <span><b id="sellerFollowing">0</b> Siguiendo</span>
            <span><b id="sellerFollowers">0</b> Seguidores</span>
        </div>

        <!-- Historial -->
        <h3 class="mt-4 font-bold text-gray-800">Historial de Ventas</h3>
        <div class="bg-gray-100 p-2 rounded mt-2">Último Pedido</div>
        <div class="bg-gray-100 p-2 rounded mt-2">Producto Más Vendido</div>
    </div>
</div>




<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
    import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";
    import { getFirestore, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
    import { updateProfile } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";


    // 🔥 Configuración de Firebase
    const firebaseConfig = {
        apiKey: "AIzaSyAPOx1dEkYWE7q3U3VVoicnUuJDSDYnBnA",
        authDomain: "owen-41fb9.firebaseapp.com",
        projectId: "owen-41fb9",
        storageBucket: "owen-41fb9.appspot.com",
        appId: "1:1002523132638:web:fb404d19937fe4293d784f"
    };

    // 🚀 Inicializar Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    const provider = new GoogleAuthProvider();



    const profilePicInput = document.getElementById("profilePicInput");
    const saveProfilePicBtn = document.getElementById("saveProfilePicBtn");
    const profilePicModal = document.getElementById("profilePicModal");

    profilePicInput.addEventListener("change", function () {
    const file = profilePicInput.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            profilePicModal.src = e.target.result; // Vista previa de la imagen
        };
        reader.readAsDataURL(file);
        saveProfilePicBtn.classList.remove("hidden"); // Muestra el botón de guardar
    }
});


   saveProfilePicBtn.addEventListener("click", async function () {
    const user = auth.currentUser;
    if (!user || !profilePicInput.files.length) {
        alert("❌ No hay usuario autenticado o no se seleccionó una imagen.");
        return;
    }

    const file = profilePicInput.files[0];
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "Tweetsocial"); // 🔹 Cambia esto por el nuevo preset que configuraste

    try {
        alert("📤 Subiendo imagen a Cloudinary...");
        const response = await fetch("https://api.cloudinary.com/v1_1/dz70korgo/image/upload", {
            method: "POST",
            body: formData
        });

        const data = await response.json();

        // 🚨 Verificar si la respuesta de Cloudinary es válida
        if (!data.secure_url) {
            throw new Error("No se recibió una URL válida de Cloudinary.");
        }

        const photoURL = data.secure_url;
        alert("✅ Imagen subida correctamente. URL: " + photoURL);

        // Guardar en Firestore
        const userRef = doc(db, "usuarios", user.uid);
        await setDoc(userRef, { modalPhotoURL: photoURL }, { merge: true });

        alert("✅ modalPhotoURL guardado en Firestore: " + photoURL);

        // ✅ Actualizar la UI en ambos modales
        document.getElementById("profilePicModal").src = photoURL;
        document.getElementById("editProfilePic").src = photoURL; // <--- 🔥 ESTA ES LA LÍNEA NUEVA

        saveProfilePicBtn.classList.add("hidden");

    } catch (error) {
        alert("❌ Error al subir la imagen: " + error.message);
        console.error("Error detallado:", error);
    }
});


    // 📌 Función para iniciar sesión con Google
    // 📌 Función para iniciar sesión con Google
async function login() {
    try {
        const result = await signInWithPopup(auth, provider);
        const user = result.user;
        console.log("✅ Usuario autenticado:", user);

        const userRef = doc(db, "usuarios", user.uid);
        const userSnap = await getDoc(userRef);

        if (!userSnap.exists()) {
            await setDoc(userRef, {
                name: user.displayName,
                email: user.email,
                photoURL: user.photoURL,
                accountType: "google",
                username: user.email.split("@")[0],
                bio: ""
            });
            alert("✅ Usuario nuevo registrado en Firestore");
        } else {
            alert("ℹ️ Usuario ya existía en Firestore");
        }

        await loadUserProfile(user.uid);
        closeModal();

    } catch (error) {
        alert("❌ Error en login: " + error.message);
        console.error("❌ Error en login:", error);
    }
}



    // 📌 Función para iniciar sesión como vendedor
    async function loginAsSeller() {
        try {
            const result = await signInWithPopup(auth, provider);
            const user = result.user;
            console.log("✅ Usuario autenticado como vendedor:", user);

            const userRef = doc(db, "users", user.uid);
            const userSnap = await getDoc(userRef);

            if (!userSnap.exists()) {
                await setDoc(userRef, {
                    name: user.displayName,
                    email: user.email,
                    photoURL: user.photoURL,
                    accountType: "seller"
                });
            } else {
                await setDoc(userRef, { accountType: "seller" }, { merge: true });
            }

            closeModal();
            loadUserProfile(user.uid);
        } catch (error) {
            console.error("❌ Error en login como vendedor:", error);
        }
    }

    // 📌 Función para cerrar sesión
    async function logout() {
        try {
            await auth.signOut();
            console.log("✅ Usuario cerró sesión");
            hideProfileOnLogout(); // Ocultar perfil correctamente
            location.reload();
        } catch (error) {
            console.error("❌ Error al cerrar sesión:", error);
        }
    }


                                                                                                                                                                                    
    // 📌 Cargar perfil desde Firestore
async function loadUserProfile(uid) {
    try {
        const userRef = doc(db, "usuarios", uid);
        const userSnap = await getDoc(userRef);

        let userData = {};
        if (userSnap.exists()) {
            userData = userSnap.data();
            console.log("📥 Datos del usuario recuperados de Firestore:", userData);

            // ✅ Actualizar campos de texto en el modal de perfil
            document.getElementById("modalProfileName").textContent = userData.name || auth.currentUser.displayName || "Usuario";
            document.getElementById("modalProfileUsername").textContent = userData.username ? "@" + userData.username : "";
            document.getElementById("modalProfileBio").textContent = userData.bio || "Sin biografía";
        } else {
            console.warn("⚠️ No se encontró un documento en Firestore para el usuario:", uid);
        }

        // ✅ Imagen de perfil
        const user = auth.currentUser;
        let profilePhoto = userData.modalPhotoURL || userData.photoURL || (user ? user.photoURL : null);

        if (!profilePhoto) {
            console.warn("⚠️ No se encontró ninguna imagen en Firestore ni en Firebase Auth.");
            profilePhoto = "https://via.placeholder.com/80";
        }

        const profilePicModal = document.getElementById("profilePicModal");
        if (profilePicModal) {
            profilePicModal.src = profilePhoto;                                                                                                                                                 console.log("🖼️ Imagen cargada en el modal:", profilePhoto);
        }

    } catch (error) {
        console.error("❌ Error al cargar perfil:", error);
    }
}


// 📌 Actualiza tu función updateUI así para evitar conflictos y pérdida de imagen:
function updateUI(user) {
    if (!user) return;
    console.log("📌 Tipo de cuenta detectado:", user.accountType);
    const profilePic = document.getElementById("profilePic");
    const profilePicSidebar = document.getElementById("profilePicSidebar");
    // Usamos la foto original de Google para la interfaz principal
    const mainPhoto = user.photoURL || "https://via.placeholder.com/40";
    if (profilePic) profilePic.src = mainPhoto;
    if (profilePicSidebar) profilePicSidebar.src = mainPhoto;
    // Eliminamos la actualización del modal para no sobreescribir la imagen personalizada
    const profileName = document.getElementById("profileName");
    if (profileName) profileName.textContent = user.name || "Usuario";
    const profileContainer = document.getElementById("profileContainer");
    if (profileContainer) profileContainer.dataset.userType = user.accountType;
    if (user.accountType === "google") {
        document.getElementById("sellerProfileModal")?.classList.add("hidden");
        document.getElementById("googleProfileModal")?.classList.remove("hidden");
    } else if (user.accountType === "seller") {
        document.getElementById("googleProfileModal")?.classList.add("hidden");
        document.getElementById("sellerProfileModal")?.classList.remove("hidden");
    }
}


async function syncAccountTypeUI(user) {
    if (!user) return;

    const userRef = doc(db, "usuarios", user.uid);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) return;

    const userData = userSnap.data();
    const accountType = userData.accountType || "google";

    // Cambiar texto del botón
    const switchBtn = document.getElementById("switchToSellerBtn");
    if (switchBtn) {
        switchBtn.textContent =
            accountType === "seller"
                ? "Cambiar a cuenta de comprador"
                : "Cambiar a cuenta de vendedor";
    }

    // Mostrar el modal correcto si es necesario (por ejemplo, si ya estaba abierto)
    const profileContainerSidebar = document.getElementById("profileContainerSidebar");
    if (profileContainerSidebar) {
        profileContainerSidebar.dataset.accountType = accountType;
    }

    // Actualizar foto y datos en el modal que esté visible
    if (accountType === "seller") {
        document.getElementById("sellerName").textContent = userData.name || "Vendedor";
        document.getElementById("sellerUsername").textContent = "@" + (userData.username || "usuario");
        document.getElementById("sellerBio").textContent = userData.bio || "Sin biografía";
        const sellerPic = userData.modalPhotoURL || userData.photoURL || user.photoURL || "https://via.placeholder.com/100";
        document.getElementById("sellerProfilePic").src = sellerPic;
    }
}



// 📌 Mantener la sesión activa
onAuthStateChanged(auth, async (user) => {
    console.log("🔄 Detectando cambios en la sesión...", user);

    const loginBtn = document.getElementById("loginBtn");
    const profileContainer = document.getElementById("profileContainer");
    const profilePic = document.getElementById("profilePic");
    const profileName = document.getElementById("profileName");
    const profileContainerSidebar = document.getElementById("profileContainerSidebar");
    const profilePicSidebar = document.getElementById("profilePicSidebar");
    const profilePicModal = document.getElementById("profilePicModal");

    if (user) {
        console.log("✅ Sesión detectada: ", user.uid);

        let mainPhoto = user.photoURL || "https://via.placeholder.com/40";

        try {
            const userRef = doc(db, "usuarios", user.uid);
            const userSnap = await getDoc(userRef);
            let userData = userSnap.exists() ? userSnap.data() : {};

            console.log("📥 Datos del usuario recuperados de Firestore:", userData);

            mainPhoto = userData.modalPhotoURL || userData.photoURL || mainPhoto;

            if (profilePicModal) {
                profilePicModal.src = mainPhoto;
                console.log("🖼️ Imagen del modal actualizada:", mainPhoto);
            }

            if (profileName) {
                profileName.textContent = userData.name || user.displayName || "Usuario";
            }
                                                                                                                                                                                                // ✅ Sincronizar la UI del tipo de cuenta (texto del botón y más)                                                                                                                  await syncAccountTypeUI(user);                                                                                                                                          
        } catch (error) {                                                                                                                                                                       console.error("❌ Error al recuperar datos del usuario:", error);
        }

        if (profilePic) profilePic.src = mainPhoto;
        if (profilePicSidebar) profilePicSidebar.src = mainPhoto;

        if (loginBtn) loginBtn.style.display = "none";
        if (profileContainer) profileContainer.style.display = "block";
        if (profileContainerSidebar) profileContainerSidebar.classList.remove("hidden");

    } else {
        console.log("🚪 No hay usuario, cerrando sesión visual...");

        if (loginBtn) loginBtn.style.display = "block";
        if (profileContainer) profileContainer.style.display = "none";
        hideProfileOnLogout();
    }
});



// 📌 Función para ocultar el perfil al cerrar sesión
function hideProfileOnLogout() {
    const profileContainerSidebar = document.getElementById("profileContainerSidebar");
    profileContainerSidebar.classList.add("hidden");

    const profilePic = document.getElementById("profilePic");
    const profileName = document.getElementById("profileName");
    const loginBtn = document.getElementById("loginBtn");

    if (profilePic) profilePic.src = "";
    if (profileName) profileName.textContent = "";
    if (loginBtn) loginBtn.style.display = "block";

    const profilePicSidebar = document.getElementById("profilePicSidebar");
    if (profilePicSidebar) profilePicSidebar.src = "";
}

                                                                                                                                                                                    // 📌 Eventos de UI
document.getElementById("loginBtn")?.addEventListener("click", () => {
    document.getElementById("loginModal")?.classList.remove("hidden");
});

document.getElementById("closeModal")?.addEventListener("click", () => {
    document.getElementById("loginModal")?.classList.add("hidden");
});

document.getElementById("googleLoginBtn")?.addEventListener("click", login);
document.getElementById("sellerLoginBtn")?.addEventListener("click", loginAsSeller);
document.getElementById("logoutBtn")?.addEventListener("click", logout);
                                                                                                                                                                                    document.getElementById("editProfileBtn")?.addEventListener("click", async () => {
    document.getElementById("editProfileModal")?.classList.remove("hidden");

    const user = auth.currentUser;
    if (user) {
        const userRef = doc(db, "usuarios", user.uid);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
            const userData = userSnap.data();

            // 🔄 Imagen de perfil personalizada o fallback
            const photoURL = userData.modalPhotoURL || userData.photoURL || user.photoURL || "https://via.placeholder.com/80";
            document.getElementById("editProfilePic").src = photoURL;

            // Datos de perfil
            document.getElementById("editProfileName").value = userData.name || user.displayName || "";
            document.getElementById("editProfileUsername").value = (userData.username || "").replace(/^@/, "");
            document.getElementById("editProfileBio").value = userData.bio || "";
        }
    }
});

document.getElementById("closeEditProfileModal")?.addEventListener("click", () => {
    document.getElementById("editProfileModal")?.classList.add("hidden");
});

document.getElementById("saveProfileBtn")?.addEventListener("click", async () => {
    const user = auth.currentUser;
    if (!user) {                                                                                                                                                                            alert("❌ No hay usuario autenticado.");
        return;
    }

    const newName = document.getElementById("editProfileName").value.trim();
    const rawUsername = document.getElementById("editProfileUsername").value.trim();
    const newUsername = rawUsername.replace(/^@/, "").trim(); // sin @
    const newBio = document.getElementById("editProfileBio").value.trim();

    try {
        // Actualizar displayName en Auth
        await user.updateProfile({ displayName: newName });

        // Guardar en Firestore
        const userRef = doc(db, "usuarios", user.uid);
        await setDoc(userRef, {
            name: newName,
            username: newUsername,
            bio: newBio
        }, { merge: true });

        console.log("✅ Perfil actualizado correctamente.");
        alert("✅ Perfil actualizado con éxito.");

        // Refrescar datos en el modal principal
        await loadUserProfile(user.uid);

        // Cerrar el modal de edición
        document.getElementById("editProfileModal").classList.add("hidden");
    } catch (error) {
        console.error("❌ Error al actualizar el perfil:", error);
    }
});


// Define estas funciones fuera del DOMContentLoaded para que sean globales
function openModal() {
    const user = auth.currentUser;
    if (!user) return;

    const userRef = doc(db, "usuarios", user.uid);
    getDoc(userRef).then((userSnap) => {
        if (userSnap.exists()) {
            const userData = userSnap.data();
            const accountType = userData.accountType || "google";

            if (accountType === "seller") {
                // Mostrar modal de vendedor
                const sellerModal = document.getElementById("sellerProfileModal");
                if (sellerModal) {
                    sellerModal.classList.remove("hidden");
                    sellerModal.style.display = "flex";
                }
            } else {
                // Mostrar modal clásico
                const profileModal = document.getElementById("profileModal");
                const modalOverlay = document.getElementById("modalOverlay");
                const modalContent = document.getElementById("modalContent");

                if (!profileModal || !modalOverlay || !modalContent) {
                    console.error("❌ No se encontraron elementos del modal.");
                    return;
                }

                profileModal.classList.remove("hidden");
                profileModal.style.display = "flex";
                modalOverlay.classList.remove("hidden");                                                                                                                            
                setTimeout(() => {
                    modalContent.classList.remove("scale-95", "opacity-0");
                    modalContent.classList.add("scale-100", "opacity-100");
                }, 10);

                document.body.style.overflow = "hidden";

                const profilePicModal = document.getElementById("profilePicModal");
                if (profilePicModal) {
                    profilePicModal.src = user.photoURL || "https://via.placeholder.com/80";
                }

                loadUserProfile(user.uid);
            }
        }
    }).catch((error) => {
        console.error("❌ Error al verificar tipo de cuenta:", error);
    });
}

function closeModal() {
    const profileModal = document.getElementById("profileModal");
    const modalOverlay = document.getElementById("modalOverlay");
    const modalContent = document.getElementById("modalContent");

    if (!profileModal || !modalOverlay || !modalContent) {
        console.error("❌ No se encontraron elementos del modal.");
        return;
    }

    modalContent.classList.add("scale-95", "opacity-0");
    modalContent.classList.remove("scale-100", "opacity-100");

    setTimeout(() => {
        profileModal.classList.add("hidden");
        profileModal.style.display = "none";
        modalOverlay.classList.add("hidden");
        document.body.style.overflow = "auto";
    }, 300);
}



document.addEventListener("DOMContentLoaded", function () {
    const profileContainerSidebar = document.getElementById("profileContainerSidebar");
    const closeProfileModal = document.getElementById("closeProfileModal");
    const modalOverlay = document.getElementById("modalOverlay");

    if (!profileContainerSidebar || !closeProfileModal || !modalOverlay) {
        console.error("❌ Error: No se encontraron algunos elementos del modal.");
        return;
    }

    profileContainerSidebar.addEventListener("click", openModal);
    closeProfileModal.addEventListener("click", closeModal);
    modalOverlay.addEventListener("click", closeModal);

    document.addEventListener("keydown", function (event) {
        if (event.key === "Escape") {
            closeModal();
        }
    });
    // ... el resto del código dentro de DOMContentLoaded
});


document.getElementById("openEditProfileFromModal").addEventListener("click", function () {
    // Cerrar el modal del perfil
    closeModal();

    // Abrir el modal de edición de perfil
    openEditProfileModal();
});


function openEditProfileModal() {
    const editProfileModal = document.getElementById("editProfileModal");
    if (!editProfileModal) {
        console.error("❌ No se encontró el modal de edición de perfil.");
        return;
    }

    editProfileModal.classList.remove("hidden");
    editProfileModal.style.display = "flex";

    setTimeout(() => {
        editProfileModal.classList.remove("scale-95", "opacity-0");
        editProfileModal.classList.add("scale-100", "opacity-100");
    }, 10);

    const user = auth.currentUser;
    if (user) {
        const userRef = doc(db, "usuarios", user.uid);
        getDoc(userRef).then((userSnap) => {
            if (userSnap.exists()) {
                const userData = userSnap.data();

                // ✅ Imagen de perfil personalizada
                const profilePicUrl = userData.modalPhotoURL || user.photoURL || "https://via.placeholder.com/80";
                document.getElementById("editProfilePic").src = profilePicUrl;

                // ✅ Datos del usuario
                document.getElementById("editProfileName").value = userData.name || user.displayName || "";
                document.getElementById("editProfileUsername").value = (userData.username || "").replace(/^@/, "");
                document.getElementById("editProfileBio").value = userData.bio || "";

                // ✅ Cambiar texto del botón según el tipo de cuenta
                const switchBtn = document.getElementById("switchToSellerBtn");
                if (switchBtn) {
                    if (userData.accountType === "seller") {
                        switchBtn.textContent = "Cambiar a cuenta de comprador";
                    } else {
                        switchBtn.textContent = "Cambiar a cuenta de vendedor";
                    }
                }
            }
        }).catch((error) => {
            console.error("❌ Error al recuperar datos del usuario:", error);
        });
    }
}



// Abrir modal de edición desde el perfil de vendedor
document.getElementById("editSellerProfileBtn")?.addEventListener("click", () => {
    // Ocultar el modal de perfil de vendedor
    document.getElementById("sellerProfileModal")?.classList.add("hidden");
    document.getElementById("sellerProfileModal").style.display = "none";

    // Abrir el modal de edición de perfil
    openEditProfileModal();
});



document.getElementById("saveProfileBtn").addEventListener("click", async () => {
    const user = auth.currentUser;
    if (!user) {
        alert("❌ No hay usuario autenticado.");
        return;
    }

    const newName = document.getElementById("editProfileName").value.trim();
    const rawUsername = document.getElementById("editProfileUsername").value.trim();
    const newUsername = rawUsername.replace(/^@/, "").trim();
    const newBio = document.getElementById("editProfileBio").value.trim();

    try {
        // ✅ Actualizar nombre en Firebase Auth correctamente
        await updateProfile(user, { displayName: newName });

        // ✅ Guardar en Firestore
        const userRef = doc(db, "usuarios", user.uid);
        await setDoc(userRef, {
            name: newName,
            username: newUsername,                                                                                                                                                              bio: newBio
        }, { merge: true });

        alert("✅ Perfil actualizado con éxito.");
        await loadUserProfile(user.uid);

        // Actualizar los elementos del modal directamente
        const updatedSnap = await getDoc(userRef);
        if (updatedSnap.exists()) {
            const updatedData = updatedSnap.data();
            document.getElementById("modalProfileName").textContent = updatedData.name;
            document.getElementById("modalProfileUsername").textContent = "@" + updatedData.username;
            document.getElementById("modalProfileBio").textContent = updatedData.bio || "Sin biografía";                                                                                    }

        document.getElementById("editProfileModal").classList.add("hidden");

    } catch (error) {
        console.error("❌ Error al actualizar el perfil:", error);
        alert("❌ Ocurrió un error al actualizar el perfil.\n" + error.message);
    }
});



document.getElementById("switchToSellerBtn")?.addEventListener("click", async () => {
    const user = auth.currentUser;
    if (!user) {
        alert("❌ No hay usuario autenticado.");
        return;
    }

    try {
        const userRef = doc(db, "usuarios", user.uid);
        const userSnap = await getDoc(userRef);

        if (!userSnap.exists()) {
            alert("⚠️ No se encontraron datos del usuario.");
            return;
        }

        const userData = userSnap.data();
        const currentType = userData.accountType || "google";

        // 🔁 Cambiar el tipo de cuenta dinámicamente
        const newType = currentType === "seller" ? "google" : "seller";
        const newLabel = newType === "seller" ? "Cambiar a cuenta de comprador" : "Cambiar a cuenta de vendedor";

        await setDoc(userRef, { accountType: newType }, { merge: true });
        alert(`✅ Tu cuenta ahora es tipo: ${newType}`);

        // 🔄 Actualizar texto del botón
        const switchBtn = document.getElementById("switchToSellerBtn");
        if (switchBtn) switchBtn.textContent = newLabel;

        // 🔒 Cerrar modales previos
        document.getElementById("editProfileModal")?.classList.add("hidden");
        document.getElementById("profileModal")?.classList.add("hidden");
        document.getElementById("profileModal").style.display = "none";
        document.getElementById("sellerProfileModal")?.classList.add("hidden");
        document.getElementById("sellerProfileModal").style.display = "none";

        // 🔄 Actualizar UI
        const updatedSnap = await getDoc(userRef);
        if (updatedSnap.exists()) {
            const data = updatedSnap.data();

            if (newType === "seller") {
                document.getElementById("sellerName").textContent = data.name || "Vendedor";
                document.getElementById("sellerUsername").textContent = "@" + (data.username || "usuario");
                document.getElementById("sellerBio").textContent = data.bio || "Sin biografía";

                const sellerPic = data.modalPhotoURL || data.photoURL || user.photoURL || "https://via.placeholder.com/100";
                document.getElementById("sellerProfilePic").src = sellerPic;

                const sellerModal = document.getElementById("sellerProfileModal");
                if (sellerModal) {
                    sellerModal.classList.remove("hidden");
                    sellerModal.style.display = "flex";
                }
            }
        }

    } catch (error) {
        console.error("❌ Error al cambiar tipo de cuenta:", error);
        alert("❌ Hubo un error al cambiar el tipo de cuenta.");
    }
});


// ✅ Cerrar modal de vendedor
document.getElementById("closeSellerModal")?.addEventListener("click", () => {
    const sellerModal = document.getElementById("sellerProfileModal");
    if (sellerModal) {
        sellerModal.classList.add("hidden");
        sellerModal.style.display = "none";
    }
});




</script>
</body>                                                                                                                                                                             </html>
